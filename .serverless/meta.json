{
  "/home/avishka/serverless/notes-api": {
    "versionSfCore": null,
    "versionFramework": "4.1.19",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "servicePath": "/home/avishka/serverless/notes-api",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "notes-api",
      "package": {
        "individually": true
      },
      "plugins": [
        "serverless-offline",
        "serverless-dotenv-plugin"
      ],
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "us-east-1",
        "environment": {
          "tableName": "notes",
          "stripeSecretKey": "<REDACTED>"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Scan",
              "dynamodb:Query",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:DescribeTable"
            ],
            "Resource": "arn:aws:dynamodb:us-east-1:*:*"
          }
        ]
      },
      "functions": {
        "hello": {
          "handler": "handler.hello",
          "events": [
            {
              "http": {
                "path": "hello",
                "method": "get"
              }
            }
          ]
        },
        "create": {
          "handler": "create.main",
          "events": [
            {
              "http": {
                "path": "notes",
                "method": "post",
                "authorizer": "aws_iam"
              }
            }
          ]
        },
        "get": {
          "handler": "get.main",
          "events": [
            {
              "http": {
                "path": "notes/{id}",
                "method": "get",
                "authorizer": "aws_iam"
              }
            }
          ]
        },
        "list": {
          "handler": "list.main",
          "events": [
            {
              "http": {
                "path": "notes",
                "method": "get",
                "authorizer": "aws_iam"
              }
            }
          ]
        },
        "update": {
          "handler": "update.main",
          "events": [
            {
              "http": {
                "path": "notes/{id}",
                "method": "put",
                "authorizer": "aws_iam"
              }
            }
          ]
        },
        "delete": {
          "handler": "delete.main",
          "events": [
            {
              "http": {
                "path": "notes/{id}",
                "method": "delete",
                "authorizer": "aws_iam"
              }
            }
          ]
        },
        "billing": {
          "handler": "billing.main",
          "events": [
            {
              "http": {
                "path": "billing",
                "method": "post",
                "authorizer": "aws_iam"
              }
            }
          ]
        }
      }
    },
    "serviceRawFile": "service: notes-api\n\n# Create an optimized package for our functions \npackage:\n  individually: true\n\nplugins:\n  - serverless-offline\n  - serverless-dotenv-plugin # Load .env as environment variables\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  stage: dev\n  region: us-east-1\n\n  environment:\n    tableName: notes\n    stripeSecretKey: ${env:STRIPE_SECRET_KEY}\n\n  iamRoleStatements:\n    - Effect: Allow\n      Action: \n        - dynamodb:Scan\n        - dynamodb:Query\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:DescribeTable\n      Resource: \"arn:aws:dynamodb:us-east-1:*:*\"\n\nfunctions:\n  hello:\n    handler: handler.hello\n    events:\n      - http:\n          path: hello\n          method: get\n\n  create:\n    handler: create.main\n    events:\n      - http:\n          path: notes\n          method: post\n          authorizer: aws_iam\n\n  get:\n    handler: get.main\n    events:\n      - http:\n          path: notes/{id}\n          method: get\n          authorizer: aws_iam\n\n  list:\n    handler: list.main\n    events:\n      - http:\n          path: notes\n          method: get\n          authorizer: aws_iam\n\n  update:\n    handler: update.main\n    events:\n      - http:\n          path: notes/{id}\n          method: put\n          authorizer: aws_iam\n\n  delete:\n    handler: delete.main\n    events:\n      - http:\n          path: notes/{id}\n          method: delete\n          authorizer: aws_iam\n\n  billing:\n    handler: billing.main\n    events:\n      - http:\n          path: billing\n          method: post\n          authorizer: aws_iam\n\n",
    "command": [
      "invoke",
      "local"
    ],
    "options": {
      "function": "billing",
      "path": "mocks/billing-event.json"
    },
    "error": {
      "message": "request to https://core.serverless.com/api/bff/ failed, reason: connect ETIMEDOUT 64:ff9b::342d:56de:443",
      "stack": "Error: request to https://core.serverless.com/api/bff/ failed, reason: connect ETIMEDOUT 64:ff9b::342d:56de:443\n    at Authentication.getClientDataFromAccessKey (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:912:17054)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Authentication.getAuthenticatedData (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:912:3687)\n    at async Authentication.resolverAuthenticate (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:912:20540)\n    at async _Meta.authenticateAndResolve (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:920:10814)\n    at async route (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:920:16254)\n    at async Object.run2 [as run] (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:920:16702)\n    at async run3 (file:///home/avishka/.serverless/releases/4.1.19/package/dist/sf-core.js:920:17962)"
    },
    "machineId": "6d8da1fbb3b4301df9301c574e0407c5",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:520539193170:stack/my-serverless-project-dev/ec0dcbb0-d7df-11ee-9da6-0eb108a0e049",
    "serviceProviderAwsCfStackCreated": "2024-03-01T15:25:23.380Z",
    "serviceProviderAwsCfStackUpdated": "2024-06-07T07:30:07.179Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "HelloLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:520539193170:function:my-serverless-project-dev-hello:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-my-serverless-project-dev-HelloLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "my-serverless-project-dev-serverlessdeploymentbuck-0izycrygvjhx",
        "ExportName": "sls-my-serverless-project-dev-ServerlessDeploymentBucketName"
      }
    ]
  },
  "unknown": {
    "versionSfCore": null,
    "versionFramework": "4.1.19",
    "isWithinCompose": false,
    "composeOrgName": null,
    "composeServiceName": null,
    "command": [],
    "options": {
      "version": true
    },
    "error": null,
    "machineId": "6d8da1fbb3b4301df9301c574e0407c5",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}